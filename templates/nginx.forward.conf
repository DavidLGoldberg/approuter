worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    client_body_buffer_size 1m;
    client_max_body_size 1m;

    sendfile        on;
    keepalive_timeout  65;

    gzip  on;

    server {
        listen       8080;
        access_log /Users/iangroff/Development/glg/approuter/build_output/var/logs/access.log;
        error_log /Users/iangroff/Development/glg/approuter/build_output/var/logs/error.log;

        location / {
            set $my_log /Users/iangroff/Development/glg/approuter/build_output/var/logs/my.log;
            set $body_log /Users/iangroff/Development/glg/approuter/build_output/var/logs/body.log;
            set $my_request_body '';
            resolver 8.8.8.8;
            proxy_set_header Accept-Encoding 'identity';
            proxy_set_header Host $host;
            proxy_pass http://$http_host$request_uri$is_args$args;

            access_by_lua '
                ngx.req.read_body()
                ngx.var.my_request_body = ngx.req.get_body_data()
            ';

            log_by_lua '
              function log_request_to(file, url, headers, body, resp_status)
                local log = io.open(file, "a")
                log:write("Request:\\n")
                log:write(string.format("  Url: %s\\n", url))
                if headers then
                  log:write("  Headers:\\n")
                  log:write("    -\\n")
                  for key, value in pairs(headers) do
                    log:write(string.format("      %s: %s\\n", key, value))
                  end
                end
                if body then
                  log:write(string.format("  Body:\\n%s\\n",body))
                end
                log:write(string.format("  Status: %s\\n", resp_status))
                log:write("\\n")
                log:close()
              end
              local args = ngx.var.args or ""
              local url = string.format("%s://%s%s%s%s",
                    ngx.var.scheme,
                    ngx.var.http_host,
                    ngx.var.uri,
                    ngx.var.is_args,
                    args)
              log_request_to(
                ngx.var.my_log,
                url,
                ngx.req.get_headers(),
                ngx.var.my_request_body,
                ngx.status
              )
            ';

        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
