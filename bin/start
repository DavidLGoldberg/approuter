#! /usr/bin/env bash

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${MY_DIR}/environment

mkdir -p ${LOG_DIR}
mkdir -p ${RUN_DIR}

silent_pushd(){ pushd $1 > /dev/null 2>&1; }
silent_popd(){ popd $1 > /dev/null 2>&1 ; }

clone_repo_as_needed() {
    # $1 - the directory to check
    # $2 - the repository url
    # if there is no git repo in the directory provided
    # we'll go ahead and clone it
    mkdir -p $1
    PARENT_PATH=`dirname $1`
    DIRNAME=`basename $1`
    if [ ! -d ${1}/.git ]; then
        # no git, clone
        silent_pushd ${PARENT_PATH}
        git clone ${2} ${DIRNAME} 
        silent_popd
    else
        printf "repo found at $1, not cloning\n"
    fi
    # create our updater entry
    EXPANDED=`${MY_DIR}/update_repo_as_needed expand $1`
    echo "$EXPANDED > 2>&1" >> ${VAR_DIR}/crontab
    echo "" >> ${VAR_DIR}/crontab
}

setup_managed_repositories(){

    # two prod instances so we can roll
    clone_repo_as_needed ${MANAGED_ROOT}/prod/instance1 `cat ${REPO_CONF}`
    clone_repo_as_needed ${MANAGED_ROOT}/prod/instance2 `cat ${REPO_CONF}`

    # alternates
    while read alternate 
    do
        echo "initializing alternate ${alternate}"
        ALTERNATE_DIR=${ALTERNATES_ROOT}/${alternate}
        clone_repo_as_needed ${ALTERNATE_DIR} `cat ${REPO_CONF}`
        silent_pushd ${ALTERNATE_DIR}
        git checkout ${alternate}
        silent_popd
    done < ${ALTERNATES_CONF}
}

start_instance(){
    # $1 path to instance
    # $2 port
    NAME=`basename $1`
    DIR_NAME=`basename $(dirname $1)`
    PORT=$2
    START_CMD=`echo "${START_CMD_TEMPLATE}" | sed -e s/{{port}}/${PORT}/g`
    START_CMD="${START_CMD}"
    PIDFILE_NAME=${NAME}_${2}.pid
    CTL_SFX=${NAME}

    # write out control files for the instances we start
    echo "#! /usr/bin/env bash" > ${RUNTIME_BIN_DIR}/start_${CTL_SFX}
    echo "pushd $1 > /dev/null 2>&1" >> ${RUNTIME_BIN_DIR}/start_${CTL_SFX}
    echo "${START_CMD} > ${LOG_DIR}/${CTL_SFX}.log 2>&1 &" >> ${RUNTIME_BIN_DIR}/start_${CTL_SFX}
    echo "INSTANCE_PID=\$!"  >> ${RUNTIME_BIN_DIR}/start_${CTL_SFX}
    echo "echo \${INSTANCE_PID} > ${RUN_DIR}/${PIDFILE_NAME}" >> ${RUNTIME_BIN_DIR}/start_${CTL_SFX}
    echo "printf '#! /usr/bin/env bash\nkill \$(' > ${RUNTIME_BIN_DIR}/stop_${CTL_SFX}" >> ${RUNTIME_BIN_DIR}/start_${CTL_SFX}
    echo "printf \"cat ${RUN_DIR}/${PIDFILE_NAME})\n\" >> ${RUNTIME_BIN_DIR}/stop_${CTL_SFX}" >> ${RUNTIME_BIN_DIR}/start_${CTL_SFX}
    echo "printf \"[ \$\? == 0 ] && rm ${RUN_DIR}/${PIDFILE_NAME}\" >> ${RUNTIME_BIN_DIR}/stop_${CTL_SFX}" >> ${RUNTIME_BIN_DIR}/start_${CTL_SFX}
    echo "chmod +x ${RUNTIME_BIN_DIR}/stop_${CTL_SFX}" >> ${RUNTIME_BIN_DIR}/start_${CTL_SFX}
    echo "popd > /dev/null 2>&1" >> ${RUNTIME_BIN_DIR}/start_${CTL_SFX}

    # keeping track of the info under which our instances are running
    # for no particular reason... yet
    printf "${DIR_NAME}\t${NAME}\t${PORT}\n" >> ${RUN_DATA_FILE}
}

for pidfile in ${RUN_DIR}/*; 
do
    if [ -f $pidfile ]; then
        echo "looks like something may be running, fix that first"
        exit 1
    fi
done;

# we're going to set up the managed repositories to be watched, so
# make sure we don't have an old crontab
rm -f ${VAR_DIR}/crontab
rm -f ${VAR_DIR}/run_data
rm -f ${RUNTIME_BIN_DIR}/*

setup_managed_repositories;
# start each of our application instances
# prod ports will be 9001, 9002
start_instance ${MANAGED_ROOT}/prod/instance1 9001
start_instance ${MANAGED_ROOT}/prod/instance2 9002
# alternates we'll start at 9050
PORT=9049
while read alternate_name
do
    PORT=`echo "${PORT}+1" | bc`
    ALTERNATE_DIR=${ALTERNATES_ROOT}/${alternate_name}
    start_instance ${ALTERNATE_DIR} ${PORT}
done < ${ALTERNATES_CONF}

$MY_DIR/gen_nginx_config
# write out nginx control files for the instance
printf "#! /usr/bin/env bash\nnginx -c ${NGINX_CONF_FILE}" > ${RUNTIME_BIN_DIR}/start_nginx
printf "#! /usr/bin/env bash\nnginx -c ${NGINX_CONF_FILE} -s quit" > ${RUNTIME_BIN_DIR}/stop_nginx
chmod +x ${RUNTIME_BIN_DIR}/*
for start_file in ${RUNTIME_BIN_DIR}/start*; 
do
  echo "starting ${start_file}"
  ${start_file}
done
${MY_DIR}/status
